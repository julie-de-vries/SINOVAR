/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import com.sun.glass.events.KeyEvent;
import com.sun.glass.events.MouseEvent;
import java.awt.BorderLayout;
import java.util.ArrayList;
import javax.swing.JFrame;
import nf.*;

/**
 *
 * @author Julie
 */
public class Accueil extends javax.swing.JFrame {

    private SIR sir;
    private final Professionnel currentUser;

    /**
     * Creates new form Accueil
     *
     * @param currentUser : utilisateur actuel connecté au logiciel
     */
    public Accueil(Professionnel currentUser) {
        String titreDePage="Sinovar";
        this.setTitle(titreDePage);
        this.currentUser = currentUser;
        DataBaseLayer DBL = new DataBaseLayer("SELECT * from sinovar.personnel;");
        Professionnels pros = new Professionnels();
        for (int i = 1; i < DBL.getResult().size(); i++) {
            ArrayList<String> row = DBL.getResult().get(i);
            int id = Integer.parseInt(row.get(0));
            Metier m = Metier.valueOf(row.get(5));
            Professionnel p = new Professionnel(id, row.get(1), row.get(2), row.get(3), row.get(4), m);
            pros.ajouterProfessionnel(p);
        }
        /*récupération du personnel de la BDD*/
        sir = new SIR(pros);
        DBL = new DataBaseLayer("SELECT * from sinovar.patient;");
        for (int i = 1; i < DBL.getResult().size(); i++) {
            ArrayList<String> row = DBL.getResult().get(i);
            int id = Integer.parseInt(row.get(2));
            Patient p = new Patient(row.get(0), row.get(1), id, row.get(3), row.get(4), row.get(5), row.get(6));
            sir.ajouterPatient(p);
        }
        /*récupération des patients de la BDD*/
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        DMRLabel = new javax.swing.JLabel();
        SearchPatientField = new javax.swing.JTextField();
        SearchPatientButton = new javax.swing.JButton();
        ScrollDMR = new javax.swing.JScrollPane();
        DMRTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        CreateDMR = new javax.swing.JButton();
        LogOutButton = new javax.swing.JButton();
        ScrollAgenda = new javax.swing.JScrollPane();
        AgendaTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        DMRLabel.setText("CONSULTER UN DMR");

        SearchPatientField.setText("Rechercher");
        SearchPatientField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchPatientFieldMouseClicked(evt);
            }
        });
        SearchPatientField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SearchPatientFieldKeyPressed(evt);
            }
        });

        SearchPatientButton.setText("R");
        SearchPatientButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchPatientButtonMouseClicked(evt);
            }
        });

        DMRTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nom", "Identifiant"
            }
        ));
        DMRTable.setColumnSelectionAllowed(true);
        ScrollDMR.setViewportView(DMRTable);
        DMRTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollDMR, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(DMRLabel)
                            .addComponent(SearchPatientField, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(SearchPatientButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchPatientField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchPatientButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DMRLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ScrollDMR, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        CreateDMR.setText("CRÉER UN DMR");

        LogOutButton.setText("log out");
        LogOutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LogOutButtonMouseClicked(evt);
            }
        });

        AgendaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Horaire", "Scanner", "Radiologie", "IRM"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        AgendaTable.setColumnSelectionAllowed(true);
        ScrollAgenda.setViewportView(AgendaTable);
        AgendaTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(LogOutButton)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(CreateDMR)
                        .addGap(251, 251, 251))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(ScrollAgenda, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 52, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(ScrollAgenda, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(CreateDMR)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LogOutButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchPatientFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchPatientFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            ArrayList<Patient> p = sir.chercherPatient(SearchPatientField.getText());//recherche les patients
            /*vide le tableau*/
            if (SearchPatientField.getText().trim().equals("")||p.isEmpty()) {
                for (int i = 0; i < DMRTable.getRowCount(); i++) {
                    DMRTable.setValueAt("", i, 0);
                    DMRTable.setValueAt("", i, 1);
                }
            } else {
                /*remplit les lignes jusqu'à ce qu'il n'y en ait plus ou jusqu'à ce que la liste soit finie*/
                for (int i = 0; i < Math.min(p.size(), DMRTable.getRowCount()); i++) {
                    DMRTable.setValueAt(p.get(i).getNomUsuel(), i, 0);
                    DMRTable.setValueAt(p.get(i).getIdPatient(), i, 1);
                }
                /*remplit le reste des lignes si la liste est plus longue que le tableau en ajoutant des lignes*/
                for (int i = DMRTable.getRowCount(); i < Math.max(p.size(), DMRTable.getRowCount()); i++) {
                    //ajouter des lignes ??
                    DMRTable.setValueAt(p.get(i).getNomUsuel(), i, 0);
                    DMRTable.setValueAt(p.get(i).getIdPatient(), i, 1);
                }
            }
        }
    }//GEN-LAST:event_SearchPatientFieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Accueil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Accueil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Accueil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Accueil.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Accueil a = new Accueil(null);
                a.setVisible(true);
                a.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            }
        });
    }

    public void SearchPatientFieldMouseClicked(java.awt.event.MouseEvent evt) {
        SearchPatientField.selectAll();
        //.setText("");
    }


    public void SearchPatientButtonMouseClicked(java.awt.event.MouseEvent evt) {
        ArrayList<Patient> p = sir.chercherPatient(SearchPatientField.getText());//recherche les patients
        /*vide le tableau*/
        if (SearchPatientField.getText().trim().equals("")||p.isEmpty()) {
            for (int i = 0; i < DMRTable.getRowCount(); i++) {
                DMRTable.setValueAt("", i, 0);
                DMRTable.setValueAt("", i, 1);
            }
        } else {
            /*remplit les lignes jusqu'à ce qu'il n'y en ait plus ou jusqu'à ce que la liste soit finie*/
            for (int i = 0; i < Math.min(p.size(), DMRTable.getRowCount()); i++) {
                DMRTable.setValueAt(p.get(i).getNomUsuel(), i, 0);
                DMRTable.setValueAt(p.get(i).getIdPatient(), i, 1);
            }
            /*remplit le reste des lignes si la liste est plus longue que le tableau en ajoutant des lignes*/
            for (int i = DMRTable.getRowCount(); i < Math.max(p.size(), DMRTable.getRowCount()); i++) {
                //ajouter des lignes ??
                DMRTable.setValueAt(p.get(i).getNomUsuel(), i, 0);
                DMRTable.setValueAt(p.get(i).getIdPatient(), i, 1);
            }
        }
    }

    public void LogOutButtonMouseClicked(java.awt.event.MouseEvent evt) {
        this.dispose();
        new Connexion().setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AgendaTable;
    private javax.swing.JButton CreateDMR;
    private javax.swing.JLabel DMRLabel;
    private javax.swing.JTable DMRTable;
    private javax.swing.JButton LogOutButton;
    private javax.swing.JScrollPane ScrollAgenda;
    private javax.swing.JScrollPane ScrollDMR;
    private javax.swing.JButton SearchPatientButton;
    private javax.swing.JTextField SearchPatientField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
